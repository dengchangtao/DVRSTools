amatrix1$setinverse()
amatrix1 = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix1$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cashsolve(amatrix)
cachesolve(amatrix)
cacheSolve(amatrix)
amatrix
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix
amatrix$get()
amatrix$getinverse()
ls()
rm(list=ls())
ls()
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$get
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
I
I
cacheSolve(amatrix)
I
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
Q
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
I
x
y
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$setinverse()
amatrix$getinverse()
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
I
data
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
I
mymatrix
mymatrix
I
x
mymatrix
mymatrix
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
mymatrix
I
I
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$setinverse()
amatrix$getinverse()
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$setinverse()
amatrix$getinverse()
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get
amatrix$get()
amatrix$getinverse()
amatrix$setinverse()
amatrix$getinverse()
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
inverse
inverse
inverse
debugSource('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
100*100
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(1:10000), nrow=10, ncol=10)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(1:10000), nrow=100, ncol=100)
100*100
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(c(seq(1,10000), nrow=100, ncol=100)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(seq(1,10000), nrow=100, ncol=100))
mymatrix
mymatrix = makeCacheMatrix(matrix(seq(1,10000), nrow=100, ncol=100))
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(seq(1,10000), nrow=100, ncol=100))
mymatrix$get()
cacheSolve(mymatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(seq(1,100), nrow=10, ncol=10))
cacheSolve(mymatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(seq(1,16), nrow=4, ncol=4))
cacheSolve(mymatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
mymatrix = makeCacheMatrix(matrix(c(5,6,7,8), nrow=2, ncol=2))
mymatrix$get()
cacheSolve(mymatrix)
matrix(seq(1,16), nrow=4, ncol=4)
mymatrix$getinverse()
cacheSolve(mymatrix)
source('~/Documents/Coursera/R-Programming/Assignment/Assignment 02/ProgrammingAssignment2/cachematrix.R')
# Input the ad data
ad = data.frame(
type = c("Poster", "Billboard", "Bus", "Digital"),
n = c(529, 356, 59, 81)
)
# Bar plot
library(ggplot2)
ggplot(data = ad, aes(x = type, y = n, fill = type)) +
geom_bar(stat = "identity", show_guide = FALSE) +
theme_bw()
# Add addition columns to data, needed for donut plot.
ad$fraction = ad$n / sum(ad$n)
ad$ymax = cumsum(ad$fraction)
ad$ymin = c(0, head(ad$ymax, n = -1))
# Donut plot
ggplot(data = ad, aes(fill = type, ymax = ymax, ymin = ymin, xmax = 4, xmin = 3)) +
geom_rect(colour = "grey30", show_guide = FALSE) +
coord_polar(theta = "y") +
xlim(c(0, 4)) +
theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
geom_text(aes(x = 3.5, y = ((ymin+ymax)/2), label = type)) +
xlab("") +
ylab("")
dat <- data.frame(party=c("CDU", "FDP", "CSU", "SPD",
"The Left", "The Greens"),
members.of.parliament=c(193, 93, 44,
146, 76, 68))
library(googleVis)
## Doughnut chart - a pie with a hole
doughnut <- gvisPieChart(dat,
options=list(
width=500,
height=500,
slices="{0: {offset: 0.2},
1: {offset: 0.2},
2: {offset: 0.2}}",
title='German parliament 2009 - 2013
(Goverment: CDU/FDP/CSU)',
legend='none',
colors="['black','orange', 'blue',
'red', 'purple', 'green']",
pieSliceText='label',
pieHole=0.5),
chartid="doughnut")
plot(doughnut)
install.packages("googleVis")
dat <- data.frame(party=c("CDU", "FDP", "CSU", "SPD",
"The Left", "The Greens"),
members.of.parliament=c(193, 93, 44,
146, 76, 68))
library(googleVis)
## Doughnut chart - a pie with a hole
doughnut <- gvisPieChart(dat,
options=list(
width=500,
height=500,
slices="{0: {offset: 0.2},
1: {offset: 0.2},
2: {offset: 0.2}}",
title='German parliament 2009 - 2013
(Goverment: CDU/FDP/CSU)',
legend='none',
colors="['black','orange', 'blue',
'red', 'purple', 'green']",
pieSliceText='label',
pieHole=0.5),
chartid="doughnut")
plot(doughnut)
library(xml_)
library(xml)
library(XML)
library(xml2)
install.packages("XML")
library(XML)
erp <- "ttps://en.wikipedia.org/wiki/List_of_ERP_software_packages""
)
()
"
"
erp <- "https://en.wikipedia.org/wiki/List_of_ERP_software_packages"
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
erp = "https://en.wikipedia.org/wiki/List_of_ERP_software_packages"
erp <- "https://en.wikipedia.org/wiki/List_of_ERP_software_packages"
tt <- readHTMLTable(erp,header=T,which = 1,stringsAsFactors=F)
require(graphics)
plot(stl(nottem, "per"))
plot(stl(nottem, s.window = 7, t.window = 50, t.jump = 1))
plot(stllc <- stl(log(co2), s.window = 21))
summary(stllc)
## linear trend, strict period.
plot(stl(log(co2), s.window = "per", t.window = 1000))
## Two STL plotted side by side :
stmd <- stl(mdeaths, s.window = "per") # non-robust
summary(stmR <- stl(mdeaths, s.window = "per", robust = TRUE))
op <- par(mar = c(0, 4, 0, 3), oma = c(5, 0, 4, 0), mfcol = c(4, 2))
plot(stmd, set.pars = NULL, labels  =  NULL,
main = "stl(mdeaths, s.w = \"per\",  robust = FALSE / TRUE )")
plot(stmR, set.pars = NULL)
# mark the 'outliers' :
(iO <- which(stmR $ weights  < 1e-8)) # 10 were considered outliers
sts <- stmR$time.series
points(time(sts)[iO], 0.8* sts[,"remainder"][iO], pch = 4, col = "red")
par(op)   # reset
library(FinCal)
# Package for time value of money calculation, time series analysis and computational finance.
property <- c("Wind farm capacity (MW)","Capital investment (Euro)",
"Period of operation (Years)", "Decomissioning costs (Euro)",
"O&M Costs (Euro/kWh)","Annual energy production (kWh)",
"Electricity selling price (Euro/kWh)","Annual discount rate (%)"
)
value <- c(50,65E6,20,3E6,0.0091,110E6,0.075,8)
cost_data <- cbind.data.frame(property,value)
print(xtable(cost_data,digits=2),type='latex',include.rownames = FALSE)
library(FinCal)
# Package for time value of money calculation, time series analysis and computational finance.
property <- c("Wind farm capacity (MW)","Capital investment (Euro)",
"Period of operation (Years)", "Decomissioning costs (Euro)",
"O&M Costs (Euro/kWh)","Annual energy production (kWh)",
"Electricity selling price (Euro/kWh)","Annual discount rate (%)"
)
value <- c(50,65E6,20,3E6,0.0091,110E6,0.075,8)
cost_data <- cbind.data.frame(property,value)
OMAnnual <- cost_data[5,"value"] * cost_data[6,"value"]
RevenueAnnual <- cost_data[7,"value"] * cost_data[6,"value"]
AnnaulNetIncome <- RevenueAnnual - OMAnnual
NPV <- npv(cost_data[8,"value"]/100,c(-1*cost_data[2,"value"],rep(x = AnnualNetIncome,20)))
OMAnnual <- cost_data[5,"value"] * cost_data[6,"value"]
RevenueAnnual <- cost_data[7,"value"] * cost_data[6,"value"]
AnnaulNetIncome <- RevenueAnnual - OMAnnual
NPV <- npv(cost_data[8,"value"]/100,c(-1*cost_data[2,"value"],rep(x = AnnualNetIncome,20)))
OMAnnual <- cost_data[5,"value"] * cost_data[6,"value"]
RevenueAnnual <- cost_data[7,"value"] * cost_data[6,"value"]
AnnaulNetIncome <- RevenueAnnual - OMAnnual
AnnaulNetIncome
NPV <- npv(cost_data[8,"value"]/100,c(-1*cost_data[2,"value"],rep(x = AnnaulNetIncome,20)))
NPV
OMAnnual <- cost_data[5,"value"] * cost_data[6,"value"]
RevenueAnnual <- cost_data[7,"value"] * cost_data[6,"value"]
AnnaulNetIncome <- RevenueAnnual - OMAnnual
NPV_Cash_Flows <- c(-1*cost_data[2,"value"],rep(x = AnnaulNetIncome,20))
NPV <- npv(cost_data[8,"value"]/100,NPV_Cash_Flows)
NPV
NPV_Cash_Flows
t(NPV_Cash_Flows)
help("npv")
NPV_Cash_Flows
PV_Decom <- pv(r = cost_data[8,"value"]/100,
n = cost_data[3,"value"],
fv = cost_data[4,"value"],
pmt = 0, type = 0)
PV_Decom
PV_All <- OMNpv + PV_Decom + -1*cost_data[2,"value"]
OMNpv <- npv(cost_data[8,"value"]/100,c(0,rep(OMAnnual,cost_data[3,"value"])))
PV_Decom <- pv(r = cost_data[8,"value"]/100,
n = cost_data[3,"value"],
fv = cost_data[4,"value"],
pmt = 0, type = 0)
PV_All <- OMNpv + PV_Decom + -1*cost_data[2,"value"]
PV_All
OMNpv
PV_Decom
PV_All <- -1*OMNpv + PV_Decom + -1*cost_data[2,"value"]
PV_All
OMNpv
cost_data[2,"valuer"]
cost_data[2,"value"]
Level_Costs <- PV_All/cost_data[3,"value"]
Level_Costs
LCOE <- Level_Costs/cost_data[6,"value"]
LCOE
LCOE_Cents <- LCOE*100
LCOE_Cents
OMAnnual
0.0091 * 110000000
OMNpv
OMNpv <- OMNpv*(-1)
OMNpv
PV_Decom
OMAnnual
OMNpv <- npv(cost_data[8,"value"]/100,c(0,rep(-1*OMAnnual,cost_data[3,"value"])))
OMNpv
OMAnnual <- cost_data[5,"value"] * cost_data[6,"value"]
OMAnnual
cost_data[8,"value"]/100
OMNpv <- npv(cost_data[8,"value"]/100,c(0,rep(-1*OMAnnual,cost_data[3,"value"])))
# PV of decomiisioning:
PV_Decom <- pv(r = cost_data[8,"value"]/100,
n = cost_data[3,"value"],
fv = cost_data[4,"value"],
pmt = 0, type = 0)
# PV All Costs: Capital + OMNpv + PV_Deom
PV_All <- -1*OMNpv + PV_Decom + -1*cost_data[2,"value"]
Level_Costs <- PV_All/cost_data[3,"value"]
LCOE <- Level_Costs/cost_data[6,"value"]
LCOE_Cents <- LCOE*100
OMNpv
PV_Decom
cost_data[2,"value"]
PV_All
OMNpv <- npv(cost_data[8,"value"]/100,c(0,rep(-1*OMAnnual,cost_data[3,"value"])))
# PV of decomiisioning:
PV_Decom <- pv(r = cost_data[8,"value"]/100,
n = cost_data[3,"value"],
fv = cost_data[4,"value"],
pmt = 0, type = 0)
# PV All Costs: Capital + OMNpv + PV_Deom
PV_All <- OMNpv + PV_Decom + -1*cost_data[2,"value"]
Level_Costs <- PV_All/cost_data[3,"value"]
LCOE <- Level_Costs/cost_data[6,"value"]
LCOE_Cents <- LCOE*100
PV_All
Level_Costs
LCOE
LCOE
Level_Costs*20
pi()
pi
0.25*pi*150^2
rho <- 1.225 #kg/m^3
P_req <- 5 #MW
V_speed <- 10 #m/s
Cp <- c(0.45)
PowerFunc <- function(Cp,rho,V_speed,Area_Swept){
WTPower <- Cp*0.5*rho*Area_Swept*V_speed^3
return(WTPower)
}
Area_Swept <- seq(0,18000,100)
plot(Area_Swept,1E-6 * PowerFunc(Cp,rho = rho,V_speed = V_speed,Area_Swept),typle="l",
col="blue",xlab <- "Swept area m^2", ylab <- "Power [mW]")
Area_Swept
Area_Swept <- c(seq(0,18000,100))
Area_Swept
plot(Area_Swept,Area_Swept^2)
plot(Area_Swept,PowerFunc(0.45,1.225,10,Area_Swept))
```
##References
devtools::install_github("rstudio/addinexamples", type = "source")
addinexamples:::reformatAddin()
x <- seq(0,100,0.1)
sin(x)
plot(sinx(x)
)
plot(sin(x))
angell <- read.table("/var/folders/w6/ct72j67n6mjdsrsz82mmslb40000gn/T//Rtmp4xyRQi/data10c0a1009cc", quote="\"", comment.char="")
View(angell)
library(XLConnect)
strsplit()
pi
0.25*pi*80ˆ2
0.25*pi*80^2
1.225*(7^3)*(0.25*pi*80^2)
1.225*(7^3)*(0.25*pi*80^2)*0.42
library(devtools)
install_github("rhydar/Metocean")
setwd("~/S2018")
source('~/Dropbox/Scripts/R/RTools/DVRSTools/ReadDVRSFxml.R')
min(c(0,2,3,4,-1))
source('~/Dropbox/Scripts/R/RTools/DVRSTools/readMooringConfig.R')
setwd("~/S2018/CF07/out")
getMooringProps("../../EX_177K_FSRU.xlsx","CF07")
getMooringProps("../../EX_177K_FSRU.xlsx","SCF07")
source('~/Dropbox/Scripts/R/RTools/DVRSTools/readMooringConfig.R')
getMooringPropsFenders("../../EX_177K_FSRU.xlsx","SCF07")
source('~/Dropbox/Scripts/R/RTools/DVRSTools/readMooringConfig.R')
getMooringPropsFenders("../../EX_177K_FSRU.xlsx","SCF07")
library(shapefiles)
install.packages("shapefiles")
library(shapefiles)
setwd("~/Dropbox/Scripts/Python/DVRS/postprocess")
read.shapefile("./fenders.shp")
read.shapefile("./fenders")
tt <- read.shapefile("./fenders.shp")
tt <- read.shapefile("./fenders")
plot(Tt)
plot(tt)
ttt <- convert.to.simple(tt)
tt$shp$header
tt$dbf
tt$shx
plot(tt$shp)
plot(tt$)
plot(tt)
library(sp)
spplot(tt)
spplot(tt$shp)
spplot(tt$shx)
str(tt)
typeof(tt$shp)
typeof(tt)
typeof(tt$shx)
sp.points("./fenders.shp")
install.packages("maptools")
library(maptools)
readShapePoints("./connection_points.shp")
tt <- readShapePoints("./connection_points.shp")
plot(tt)
fenders <- readShapeLines("../tmp/line_test.shp")
plot(fenders)
par(new=T)
plot(tt,col="red")
par(new=T)
plot(fenders)
fenders
draw.shape
tt <- shapefiles::read.shapefile("./connection_points")
draw.shape(tt)
library(maptools)
